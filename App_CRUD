from flask import Flask, jsonify, request
from flask_cors import CORS
from pymongo import MongoClient
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
CORS(app)
client = MongoClient("mongodb://localhost:27017/")  # Replace with your MongoDB URI
db = client['user_database']  # Database name
user_collection = db['users']  # Collection name
@app.route('/users', methods=['POST'])
def create_user():
    data = request.json
    if not data or not all(k in data for k in ('name', 'email', 'password')):
        return jsonify({'error': 'Invalid input'}), 400

    if user_collection.find_one({'email': data['email']}):
        return jsonify({'error': 'Email already exists'}), 400

    hashed_password = generate_password_hash(data['password'], method='sha256')

    user = {
        'name': data['name'],
        'email': data['email'],
        'password': hashed_password
    }
    result = user_collection.insert_one(user)

    return jsonify({'message': 'User created', 'id': str(result.inserted_id)}), 201
@app.route('/users', methods=['GET'])
def get_users():
    users = list(user_collection.find({}, {'_id': 1, 'name': 1, 'email': 1}))
    for user in users:
        user['id'] = str(user.pop('_id'))
    return jsonify(users), 200

@app.route('/users/<email>', methods=['GET'])
def get_user(email):
    user = user_collection.find_one({'email': email}, {'_id': 1, 'name': 1, 'email': 1})
    if not user:
        return jsonify({'error': 'User not found'}), 404
    user['id'] = str(user.pop('_id'))
    return jsonify(user), 200

@app.route('/users/<email>', methods=['PUT'])
def update_user(email):
    data = request.json
    if not data:
        return jsonify({'error': 'Invalid input'}), 400

    if 'password' in data:
        data['password'] = generate_password_hash(data['password'], method='sha256')

    updated_user = user_collection.find_one_and_update(
        {'email': email},
        {'$set': data},
        return_document=True
    )
    if not updated_user:
        return jsonify({'error': 'User not found'}), 404
    return jsonify({'message': 'User updated successfully'}), 200
@app.route('/users/<email>', methods=['DELETE'])
def delete_user(email):
    result = user_collection.delete_one({'email': email})
    if result.deleted_count == 0:
        return jsonify({'error': 'User not found'}), 404
    return jsonify({'message': 'User deleted successfully'}), 200
@app.route('/login', methods=['POST'])
def login():
    data = request.json
    if not data or not all(k in data for k in ('email', 'password')):
        return jsonify({'error': 'Invalid input'}), 400

    user = user_collection.find_one({'email': data['email']})
    if not user or not check_password_hash(user['password'], data['password']):
        return jsonify({'error': 'Invalid email or password'}), 401

    return jsonify({'message': 'Login successful', 'id': str(user['_id']), 'name': user['name']}), 200

@app.route('/', methods=['GET'])
def health_check():
    return jsonify({'message': 'API is running!'}), 200

if __name__ == '__main__':
    app.run(debug=True)
